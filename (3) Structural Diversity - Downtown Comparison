# This code is based on the work of Morgenroth et al. (2020) (DOI: 10.3390/f11020135)

import pandas as pd
import numpy as np
from scipy.stats import mannwhitneyu

## Import data and merge
master_df = pd.read_csv(r'C:\Users\alexj\Documents\Research\Canadian Urban Forest Inventories - Structure and Diversity\Python Scripts and Datasets\(2) Filtered Master Dataset.csv', low_memory=False)
downtown_df = pd.read_csv(r'C:\Users\alexj\Documents\Research\Canadian Urban Forest Inventories - Structure and Diversity\Python Scripts and Datasets\Non-Inventory Datasets\Downtown Areas.csv', low_memory=False)
df = master_df.merge(downtown_df, how='left', on='DAUID')
included_cities = ['Moncton', 'Fredericton', 'Quebec City', 'Longueuil', 'Montreal', 'Ottawa', 'Kingston',
 'Toronto', 'St. Catherines', 'Kitchener', 'Guelph', 'Windsor', 'Winnipeg', 'Regina', 'Lethbridge', 'Calgary',
 'Edmonton', 'Kelowna', 'Vancouver', 'Victoria', 'Mississauga', 'Burlington', 'Waterloo']
df = df[df['City'].isin(included_cities)]

# Define downtown and cities
df['DOWNTOWN'] = np.where(df['DOWNTOWN'] == 'Downtown', 1, 0)
cities = df['City'].unique()

# Ensure DBH is numeric and drop NaN values
df['DBH'] = pd.to_numeric(df['DBH'], errors='coerce')
df = df.dropna(subset=['DBH'])

# Group by City and Downtown and calculate median and standard deviation
grouped_stats = df.groupby(['City', 'DOWNTOWN'])['DBH'].agg(['median', 'std']).reset_index()
print(grouped_stats)

# Loop over each city and perform Kruskal-Wallis test for DBH grouped by Downtown
results = []
for city in cities:
 # Subset data for the current city
 city_data = df[df['City'] == city]

 # Group by Downtown (0 or 1)
 group_0 = city_data[city_data['DOWNTOWN'] == 0]['DBH']
 group_1 = city_data[city_data['DOWNTOWN'] == 1]['DBH']

 # Check for non-empty groups before performing the test
 if len(group_0) > 0 and len(group_1) > 0:
  # Perform Mann-Whitney U Test
  stat, p_value = mannwhitneyu(group_0, group_1, alternative='two-sided')

  # Append results
  results.append({'City': city, 'U-statistic': stat, 'p-value': p_value})
 else:
  # Handle cases where a group is empty
  results.append({'City': city, 'U-statistic': None, 'p-value': None})

# Convert results to DataFrame for easy viewing
results_df = pd.DataFrame(results)

# Export the DataFrame to a CSV file
grouped_stats.to_csv(r'(3) Downtown Comparison - Grouped Statistics.csv', index=False)
results_df.to_csv(r'(3) Downtown Comparison - Mann-Whitney U Test Results.csv', index=False)
